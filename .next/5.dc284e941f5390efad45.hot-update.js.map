{"version":3,"file":"5.dc284e941f5390efad45.hot-update.js","sources":["webpack:///components/Table.js"],"sourcesContent":["import Link from 'next/link'\nimport {Table} from 'react-materialize'\nimport MyContext from '../config/Context'\nimport moment from 'moment'\nclass Slip extends React.Component {\n  componentDidMount() {\n    console.log(this.state)\n    this.renderDate()\n    this.renderGross()\n  }\n  componentDidUpdate() {\n    console.log(this.state)\n  }\n  renderDate = (cts) => {\n    console.log(\"cts\", moment(cts).format('ll'))\n    const formattedDate = moment(cts).format('ll')\n    return formattedDate\n  }\n  renderName = (fn, ln) => {\n    const employeeName = `${fn\n      .charAt(0)\n      .toUpperCase()}${fn\n      .slice(1)} ${ln\n      .charAt(0)\n      .toUpperCase()}${ln\n      .slice(1)} `\n    console.log(this.state)\n    // this.setState({employeeName:employeeName})\n    return employeeName\n  }\n\n  renderGross = (income) => {\n    console.log(income);\n    const Gross = Math.floor(income / 12)\n    return Gross\n  }\n  renderIncomeTax = (income, brackets) => {\n    let incomeTax;\n    const Brackets = brackets.forEach(function (bracket) {\n      if (bracket.startingAt < income && income < bracket.upto) {\n        console.log(\"mybracket is\", bracket)\n        incomeTax = Math.floor((bracket.baseTax + bracket.taxRate * (income - bracket.startingAt)) / 12);\n        console.log(incomeTax)\n      }\n    })\n    return incomeTax;\n  }\n  renderNetIncome = (tax, gross) => {\n    console.log(tax, gross);\n    const NetIncome=gross - tax;\n    return NetIncome\n  }\n  renderSuper = (gross,supr) => {\n    const suprRate=supr/100\n    console.log(gross, suprRate);\n    const Supr = gross*suprRate\n    // const Gross = income / 12 return Gross\n    return Supr\n  }\n  render() {\n\n    return (\n      <MyContext.Consumer>\n        {(context) => (\n          <React.Fragment>\n\n            <div className=\"container\">\n              <Table>\n                <thead>\n\n                  <tr>\n                    <th data-field=\"id\">{this.renderName(context.state.fn, context.state.ln)}</th>\n                    {/* <th data-field=\"name\"></th> */}\n                    <th data-field=\"Pay Period\" className=\"has-text-right\">\n                      {this.renderDate(context.state.PeriodStart)}\n                      - {this.renderDate(context.state.PeriodEnd)}\n                    </th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                <tr>\n                    <td data-field=\"id\">Annual Salary:  </td>\n                    {/* <th data-field=\"name\"></th> */}\n                    <td data-field=\"Pay Period\" className=\"has-text-right\">\n                      ${context.state.AnnualSalary}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td></td>\n\n                  </tr>\n                  <tr>\n                    <td>Gross Income (monthly):</td>\n                    {/* <td></td> */}\n                    <td className=\"has-text-right\">${this.renderGross(context.state.AnnualSalary)} </td>\n                  </tr>\n                  <tr>\n                    <td>Income Tax (monthly):</td>\n                    {/* <td></td> */}\n                    <td className=\"has-text-right\">- ${this.renderIncomeTax(context.state.AnnualSalary, context.state.TaxBrackets)} </td>\n                  </tr>\n                  <tr>\n                    <td>Net Income: (monthly)</td>\n                    {/* <td></td> */}\n                    <td className=\"has-text-right\">${this.renderNetIncome(\n                      this.renderIncomeTax(\n                        context.state.AnnualSalary, context.state.TaxBrackets\n                      ), this.renderGross(context.state.AnnualSalary)\n                    )} monthly</td>\n                  </tr>\n                  <tr>\n                    <td>Super Amount:</td>\n                    {/* <td></td> */}\n                    <td className=\"has-text-right\">${this.renderSuper(this.renderGross(context.state.AnnualSalary), context.state.Super)}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          </React.Fragment>\n        )}</MyContext.Consumer>\n\n    );\n  }\n}\n\n// const WrappedHorizontalLoginForm = Form.create()(EmployeeForm);\n// ReactDOM.render(<WrappedHorizontalLoginForm />, mountNode); const\n// WrappedHorizontalLoginForm = Form.create()(EmployeeForm);\n// ReactDOM.render(<WrappedHorizontalLoginForm />, mountNode);\n\nexport default Slip\n\n\n// WEBPACK FOOTER //\n// components/Table.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AAOA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AArDA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AA+CA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnDA;AA4DA;;;;;;;;;;;AAvHA;AA2HA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;AA/HA;;;;;;;;;;A","sourceRoot":""}